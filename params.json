{"name":"Vectcl","tagline":"Numeric array and linear algebra extension for Tcl","body":"VecTcl \r\n=====\r\n\r\nA numerical array extension for Tcl\r\n\r\nThis package provides a numerical array extension for Tcl with support for\r\nvectors, matrices and higher-rank tensors of integers, floating point and\r\ncomplex numbers. It has builtin support for basic array shaping, slicing and\r\nlinear algebra subroutines and is designed to integrate seamlessly with Tcl. The\r\nuser interface consists of a single command, _vexpr_, which acts as an expression\r\nevaluator similar to expr. The language supported by vexpr is inspired by\r\nMatlab, which closely models the language used by textbook math.\r\n    \r\n    package require vectcl\r\n    namespace import vectcl::vexpr\r\n\r\n\r\nThe conversion between VecTcl's numeric arrays and Tcl lists is transparently\r\nhandled through Tcl's object system:\r\n\r\n    # create a vector and multiply by 3\r\n    set x {1.0 2.0 3.0}\r\n    vexpr {3*x}\r\n    # 3.0 6.0 9.0\r\n\r\nWhat already works now\r\n----------------------\r\n\r\nVectcl has builtin support for linear system solving\r\n\r\n    # create a matrix\r\n    set A {{2.0 3.0} {5.0 6.0} {7.0 8.0}}\r\n    vexpr { p = A\\x ;# solve p = A^-1 x\r\n\t    # in the least squares sense if m>n\r\n    }\r\n    # 0.23684210526315772 0.15789473684210545\r\n\r\narray slicing, shaping and reductions\r\n\r\n    vexpr { A[:,1] = {9 10 11} }\r\n    # {{2.0 9.0} {5.0 10.0} {7.0 11.0}}\r\n    vexpr { A=hstack(x, x.^2) }\r\n    # {1.0 1.0} {2.0 4.0} {3.0 9.0}\r\n    vexpr { sum(x.^2)}\r\n    # 14.0\r\n\r\n\r\nand complex numbers\r\n\r\n    vexpr { list((1+2i)*(3+4i), sinh(2+3i) }\r\n    # -5.0+10.0i -3.5905645899857794+0.5309210862485197i\r\n\r\nVector expressions are compiled into Tcl procedures; the curious can peek into\r\nthe compiler output\r\n\r\n\tvectcl::compile {\r\n\t\tx, y = list(y, x) ;# swap x and y\r\n\t\tA= -3*x\r\n\t}\r\n\t# this outputs:\r\n\tupvar 1 y y\r\n\tupvar 1 x x\r\n\tupvar 1 A A\r\n\tset __temp1 [list [set y] [set x]]\r\n\tlassign $__temp1 x y\r\n\r\n\tset A [numarray::neg [numarray::* 3 [set x]]]\r\n\r\nDesign decisions\r\n---------------\r\n\r\nThe value semantics, i.e. implicit conversion from and to lists, has a number of advantages:\r\n\r\n- automatic garbage collection by Tcl\r\n- interoperability with commands working on lists, and math::linearalgebra\r\n- the vector language can be extended by Tcl procs\r\n- it is reasonable fast\r\n\r\nCurrently a (small) patch to the core is required to make shimmering to lists\r\nefficient. It works without, but then the conversion from numeric arrays to\r\nlists goes via the string representation. There are no other dependencies\r\nbesides the pt module of tcllib, which is required for the parser. The final\r\nversion could use a parser implemented in C. \r\n\r\nTODO\r\n====\r\n\t* More examples\r\n\t* More linear algebra implementations (LU, eigenvalue, SVD, FFT)\r\n\t* Optional LAPACK integration\r\n\t* User documentation\r\n\t* Source code documentation    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}